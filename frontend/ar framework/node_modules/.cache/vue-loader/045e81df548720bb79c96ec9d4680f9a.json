{"remainingRequest":"D:\\vue js project\\ar-framework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue js project\\ar-framework\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue js project\\ar-framework\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue js project\\ar-framework\\src\\components\\QuizCreate.vue?vue&type=template&id=4f3bb561&scoped=true&","dependencies":[{"path":"D:\\vue js project\\ar-framework\\src\\components\\QuizCreate.vue","mtime":1584031298674},{"path":"D:\\vue js project\\ar-framework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue js project\\ar-framework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue js project\\ar-framework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue js project\\ar-framework\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}